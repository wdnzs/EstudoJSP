package filter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@WebFilter(urlPatterns = { "/principal/*" }) // Intercepa todas as requisições que vierem do projeto ou mapeamento
public class FilterAutenticacao implements Filter {

	public FilterAutenticacao() {

	}

	// Encerra os processos quando o servidor é parado
	public void destroy() {

	}

	// Intercepta as requisições e as respostas no sistema
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {

		HttpServletRequest req = (HttpServletRequest) request;
		HttpSession session = req.getSession();

		String usuarioLogado = (String) session.getAttribute("usuario");

		String urlParaAutenticar = req.getServletPath(); // URL que está sendo acessada

		// Validar se está logado senão redireciona para a tela de login
		if (usuarioLogado == null
				|| (usuarioLogado != null && usuarioLogado.isEmpty()) && !urlParaAutenticar.contains("ServletLogin")) {
			
			RequestDispatcher redireciona = request.getRequestDispatcher("/index.jsp?url=" + urlParaAutenticar);
			request.setAttribute("msg", "Por favor realize o login!");
			redireciona.forward(request, response);
			return; // Para a execução e redireciona para o login
			
		} else {
			chain.doFilter(request, response);
		}
	}

	// Inicia os processos ou recursos quando o servidor sobe o projeto
	public void init(FilterConfig fConfig) throws ServletException {

	}

}
