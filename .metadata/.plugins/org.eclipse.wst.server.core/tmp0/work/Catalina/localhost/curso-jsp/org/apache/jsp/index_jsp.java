/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.10
 * Generated at: 2021-09-11 15:35:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\"\r\n");
      out.write("	integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\r\n");
      out.write("	crossorigin=\"anonymous\">\r\n");
      out.write("<title>Curso JSP</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("form {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 40%;\r\n");
      out.write("	left: 33%;\r\n");
      out.write("	right: 33%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h4 {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 30%;\r\n");
      out.write("	left: 33%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("p{\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 80%;\r\n");
      out.write("	left: 33%;\r\n");
      out.write("	font-size: 15px;\r\n");
      out.write("	color: #664d03;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h4>Bem-vindo ao curso JSP</h4>\r\n");
      out.write("\r\n");
      out.write("	<form action=\"");
      out.print(request.getContextPath());
      out.write("/ServletLogin\" method=\"post\"	class=\"row g-3 needs-validation\" novalidate>\r\n");
      out.write("		<input type=\"hidden\" value=\"");
      out.print(request.getParameter("url"));
      out.write("\" name=\"url\">\r\n");
      out.write("			\r\n");
      out.write("		<div class=\"col-bd-4\">\r\n");
      out.write("			<label for=\"validationCustom01\" class=\"form-label\">Login</label> \r\n");
      out.write("			<input class=\"form-control\"	name=\"login\" type=\"text\" id=\"validationCustom01\" required>\r\n");
      out.write("			<div class=\"valid-feedback\">OK</div>\r\n");
      out.write("			<div class=\"invalid-feedback\">Por favor, insira senha.</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"col-bd-4\">\r\n");
      out.write("			<label for=\"validationCustom02\" class=\"form-label\">Senha</label>\r\n");
      out.write("			<input class=\"form-control\"	name=\"senha\" type=\"password\" required=\"required\">\r\n");
      out.write("			<div class=\"valid-feedback\">OK</div>\r\n");
      out.write("			<div class=\"invalid-feedback\">Por favor, insira senha.</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<input type=\"submit\" value=\"Acessar\" class=\"btn btn-primary\">\r\n");
      out.write("\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<p class=\"text-danger\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("	\r\n");
      out.write("	<script\r\n");
      out.write("	\r\n");
      out.write("		src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("		integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\"\r\n");
      out.write("		crossorigin=\"anonymous\"></script>\r\n");
      out.write("		\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		// Example starter JavaScript for disabling form submissions if there are invalid fields\r\n");
      out.write("		(function() {\r\n");
      out.write("			'use strict'\r\n");
      out.write("\r\n");
      out.write("			// Fetch all the forms we want to apply custom Bootstrap validation styles to\r\n");
      out.write("			var forms = document.querySelectorAll('.needs-validation')\r\n");
      out.write("\r\n");
      out.write("			// Loop over them and prevent submission\r\n");
      out.write("			Array.prototype.slice.call(forms).forEach(function(form) {\r\n");
      out.write("				form.addEventListener('submit', function(event) {\r\n");
      out.write("					if (!form.checkValidity()) {\r\n");
      out.write("						event.preventDefault()\r\n");
      out.write("						event.stopPropagation()\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("					form.classList.add('was-validated')\r\n");
      out.write("				}, false)\r\n");
      out.write("			})\r\n");
      out.write("		})()\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
